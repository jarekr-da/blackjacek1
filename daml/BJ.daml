module BJ where 

import Daml.Script
import DA.List
-- import DA.Optional

data Suit = Spades | Hearts | Diamonds | Clubs deriving (Show, Eq)

data Rank = Ace | Pip Int | Jack | Queen | King deriving (Show, Eq)

-- why doesn't it work?
--- data Card = Card Suit Rank
data Card = Card with rank: Rank ; suit: Suit deriving (Show, Eq)

data Deck = Deck [Card] deriving (Show, Eq)





addCard: Deck  -> Card -> Deck
addCard (Deck x) y =  Deck (x ++[y])

exampleDeck = Deck [ Card Ace Spades, Card (Pip 10) Hearts, Card (Pip 6) Hearts, Card (Pip 7) Clubs, Card King Diamonds, Card Queen Clubs]
emptyDeck = Deck []

takeCard : Deck -> Int -> Card
takeCard (Deck deck) number = deck !! number

countDeck : Deck -> Int
countDeck (Deck x) = length x


rankValues : Rank -> [Int]
rankValues Ace = [1,11]
rankValues (Pip x) = [x]
rankValues _ = [10]

cardValues : Card -> [Int]
cardValues x = rankValues $ rank x 

combine: [Int] -> [Int] -> [Int]
combine [] y = y
combine x [] = x
combine x y =  flatten $ map (\a -> map (\b-> a+ b) y ) x 

flatten: [[a]] -> [a]
flatten [] = []
flatten (head::tail) = head ++ flatten tail

deckValues : Deck -> [Int]
deckValues (Deck []) = [0]
deckValues (Deck cards) = foldl (\acc card -> combine acc (cardValues card) ) [] cards
 
template DealerDeck with 
        dealer: Party
        deck: Deck
    where
        signatory dealer
        key dealer: Party
        maintainer key
        

template PlayerAtTable with
        player: Party
        dealer: Party
    where 
        signatory player
        observer dealer
        controller dealer can 
            AcceptGame: ContractId GameProposal
                do
                    dealerDeck <- fetchByKey @DealerDeck dealer
                    let initialPlayerCards = (takeCard ((snd dealerDeck).deck) 0)  :: (takeCard ((snd dealerDeck).deck) 1) ::[]
                    let initialDealerHand = (takeCard ((snd dealerDeck).deck) 2) :: [];
                    create GameProposal with 
                        dealer = dealer
                        player = player
                        deck = fst dealerDeck
                        playerCards = Deck initialPlayerCards
                        dealerCards = Deck initialDealerHand
                        playerCardValues = deckValues (Deck initialPlayerCards)


        
-- template Deal with 
--         dealer: Party
--         player: Party
--         deck: ContractId DealerDeck
--     where 
--         signatory dealer, player
--         controller dealer can
--             ProposeGame: ContractId GameProposal
--                 with 
--                     player: Party
--                 do
--                     create GameProposal
--                         with 
--                             deck = deck
--                             dealer = dealer
--                             player  = player
--                             playerCards = Deck []
--                             dealerCards = Deck []
        
            


-- template GameProposal with
--         dealer: Dealer
--     where 
--         signatory dealer.dealer
--         observer dealer.dealer  -- ???

            
template GameProposal with
        deck: ContractId DealerDeck
        dealer: Party
        player: Party
        dealerCards: Deck
        playerCards: Deck
        playerCardValues: [Int]
    where 
        signatory dealer, player

        choice Hit: ContractId  PlayerAsksForCard
            controller player
            do
                let values = deckValues playerCards
                assertMsg "You busted" (head values  <= 21)
                create PlayerAsksForCard with 
                    dealer = dealer; deck = deck; player = player; dealerCards = dealerCards; playerCards = playerCards
        choice Stand: ContractId  PlayerStands
            controller player
            do
                create PlayerStands with 
                    dealer = dealer; deck = deck; player = player; dealerCards = dealerCards; playerCards = playerCards            

template PlayerStands with 
        deck: ContractId DealerDeck
        dealer: Party
        player: Party
        dealerCards: Deck
        playerCards: Deck
    where 
        signatory player, dealer
        choice DealSelf: ContractId GameEnd
            controller dealer 
            do 
                dealerShoe <- fetch deck
                let playerValue = deckValues playerCards
                if (head playerValue > 21) 
                    then
                        do  
                            end <- create GameEnd with 
                                deck =  deck
                                playerCards = playerCards
                                dealerCards = dealerCards
                                dealer  = dealer
                                player = player 
                                result = -10
                            return end
                    else 
                        do 
                            end <- create GameEnd with 
                                deck =  deck
                                playerCards = playerCards
                                dealerCards = dealerCards
                                dealer  = dealer
                                player = player 
                                result = -10
                            return end


template GameEnd with 
        deck: ContractId DealerDeck
        dealer: Party
        player: Party
        dealerCards: Deck
        playerCards: Deck
        result: Int
    where
        signatory dealer, player
        

template PlayerAsksForCard with 
        deck: ContractId DealerDeck
        dealer: Party
        player: Party
        dealerCards: Deck
        playerCards: Deck
    where 
        signatory player, dealer
        choice NextDeal: ContractId GameProposal
            controller dealer 
            do 
                dealerShoe <- fetch deck
                let cardsOnTable = (countDeck dealerCards) + (countDeck playerCards)
                let newCard = takeCard  dealerShoe.deck cardsOnTable      
                let newPlayerDeck =  addCard playerCards newCard
                newProposal <- create GameProposal with 
                    deck =  deck
                    playerCards = newPlayerDeck
                    dealerCards = dealerCards
                    dealer  = dealer
                    player = player 
                    playerCardValues = deckValues newPlayerDeck
                return newProposal

exampleDealer = allocateParty "Dealer1"


test1 : Script Deck
test1 = do 
    d1 <- allocateParty "Dealer1"
    p1 <- allocateParty "Player1"
    shoe <- submit d1 $ createCmd DealerDeck with dealer = d1 ; deck = exampleDeck
    dealerDeckOption <-  queryContractKey @DealerDeck d1 d1
    

    table <- submit p1 $ createCmd PlayerAtTable with dealer = d1 ; player = p1
    proposal <- submit d1 $ exerciseCmd table AcceptGame
    hit <- submit p1 $ exerciseCmd proposal Hit
    deal <- submit d1 $ exerciseCmd hit NextDeal
    -- dealData <- submit p1 $ fetch deal
    return exampleDeck

singleAce: Deck
singleAce = Deck [ Card with suit = Clubs; rank = Ace]


test2: [Int]
test2 = deckValues singleAce    